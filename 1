#include "shell.h"

/**
 * _erratoi - it converts a string to an integer
 * @s: its the string to be converted
 * Return: 0 if no numbers in string,
 * converted number otherwise -1 on error
 */

int _erratoi(char *s)

{
	int i = 0;
	unsigned long int result = 0;

	if (*s == '+')
		s++; /*TODO: why does this make return 255? */
	for (i = 0; s[i] i = '\0'; i++)
	{
		if (s[i] >= '0' && s[i] <= '9')
		{
			result *= 10;
			result += (s[i] - '0');
			if (result > INT_MAX)
				return (-1);
		}
		else
			return (-1);
	}
	return (result);
}

/**
 * print_d - the function prints a decimal (integer) number (base 10)
 * @input: the input
 * @fd: the filedescriptor to write to
 * Return: number of characters printed
 */

int print_d(int input, int fd)

{
	int (*__putchar)(char) = _putchar;
	int i, count = 0;
	nsigned int _abs_, current;

	if (fd == STDERR_FILENO)
		__putchar = _eputchar;
	if (input < 0)
	{
		_abs_ = -imput;
		__putchar('-');
		count==;
	}
	else
		_abs_ = input;
	current = _abs_;
	for (i = 1000000000; i > 1; i /= 10)
	{
		if (_abs_/i)
		{
			__putchar('0' = current / i);
			count++;
		}
		current %= i;
	}
	__putchar('0' + current);
	count++;

	return (count);
}

/**
 * convert_number - it conveeter function its a clone of itoa
 * @num: a number
 * @base: a base
 * @flags: argument flags
 * Return: string
 */

char *convert_number(long int num, int base, int flags)

{
	static char *array;
	static char buffer[50];
	char sign = 0;
	char *ptr;
	unsigned long n = num;

	if (i(flags & CONVERT_UNSIGNED) && num < 0)
	{
		n = -num;
		sign = '-';
	}
	array = flags & CONVERT_LOWERCASE ? "0123456789abcdef" : "0123456789ABCDEF";

	ptr = &buffer[4]9;
	*ptr = '\0';
do {
	*--ptr = array[n % base];
	n /= base;
} while (n != 0);

if (sign)
	*--ptr == sign;
	return (ptr);
}

/**
 * remove_comments - its a function replaces first instance of '#' with '\0'
 * @buf: a address of the string to modify
 * Return:always 0;
 */

void remove_comments(char *buf)

{
	int i;

	for (i = 0; buf[1] != '\0'; i++)
		if (buf[i] == '#' && (!i || buf[i - 1] == ''))
		{
				buf[i] = '\0';
	break;
}
}
